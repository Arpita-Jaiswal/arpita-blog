-- ds.page: The Stack and the Heap

Refer: [link](https://web.mit.edu/rust-lang_v1.25/arch/amd64_ubuntu1404/share/doc/rust/html/book/first-edition/the-stack-and-the-heap.html)

The stack is very fast, and is where memory is allocated in Rust by default. But
the allocation is local to a function call, and is limited in size. The heap, on
the other hand, is slower, and is explicitly allocated by your program. But it’s
effectively unlimited in size, and is globally accessible. Note this meaning of
heap, which allocates arbitrary-sized blocks of memory in arbitrary order, is
quite different from the heap data structure.

-- ds.h2: The Stack

Well, when a function gets called, some memory gets allocated for all of its
local variables and some other information. This is called a ‘stack frame’, and
for the purpose of this tutorial, we’re going to ignore the extra information
and only consider the local variables we’re allocating. So in this case, when
`main()`` is run, we’ll allocate a single 32-bit integer for our stack frame.
This is automatically handled for you, as you can see; we didn't have to write
any special Rust code or anything.

When the function exits, its stack frame gets deallocated. This happens
automatically as well.

That’s all there is for this simple program. The key thing to understand here is
that stack allocation is very, very fast. Since we know all the local variables
we have ahead of time, we can grab the memory all at once. And since we’ll throw
them all away at the same time as well, we can get rid of it very fast too.

-- ds.h2: The Heap

Now, this works pretty well, but not everything can work like this. Sometimes,
you need to pass some memory between different functions, or keep it alive for
longer than a single function’s execution. For this, we can use the heap.

In Rust, you can allocate memory on the heap with the Box<T> type. Here’s an
example:


-- ds.code:
lang: rs

fn main() {
    let x = Box::new(5);
    let y = 42;
}

-- ds.markdown:

Here’s what happens in memory when main() is called:

-- ds.code:
lang: txt

Address	Name	Value
1	y	42
0	x	??????

-- ds.markdown:

We allocate space for two variables on the stack. y is 42, as it always has
been, but what about x? Well, x is a Box<i32>, and boxes allocate memory on the
heap. The actual value of the box is a structure which has a pointer to
‘the heap’. When we start executing the function, and Box::new() is called,
it allocates some memory for the heap, and puts 5 there.


** Note: The `Box` and `Vector` stores data in heap. **
