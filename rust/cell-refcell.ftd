-- ds.page: Shareable Mutable Container (Cell and RefCell)

Refer: [link 1](https://doc.rust-lang.org/std/cell/struct.RefCell.html), [link
2](https://doc.rust-lang.org/std/cell/struct.Cell.html), [link 3](https://blog.iany.me/2019/02/rust-cell-and-refcell/#:~:text=The%20difference%20is%20how%20they,mutable%20and%20immutable%20reference%20borrowing.)

Rust memory safety is based on this rule: Given an object T, it is only possible
to have one of the following:

- Having several immutable references (&T) to the object (also known as
aliasing).
- Having one mutable reference (&mut T) to the object (also known as
mutability).

This is enforced by the Rust compiler. Sometimes it is required to have multiple
references to an object and yet mutate it.

Shareable mutable containers exist to permit mutability in a controlled manner,
even in the presence of aliasing. Both `Cell<T>` and `RefCell<T>` allow doing
this in a single-threaded way. However, neither `Cell<T>` nor `RefCell<T>` are
thread safe (they do not implement `Sync`). To do aliasing and mutation between
multiple threads it is possible to use `Mutex<T>`, `RwLock<T>` or `atomic` types.

-- ds.h2: Cell

A mutable memory location.

In this example, you can see that `Cell<T>` enables mutation inside an immutable
struct. In other words, it enables "interior mutability".

-- ds.code:
lang: rs

use std::cell::Cell;

struct SomeStruct {
    regular_field: u8,
    special_field: Cell<u8>,
}

let my_struct = SomeStruct {
    regular_field: 0,
    special_field: Cell::new(1),
};

let new_value = 100;

// ERROR: `my_struct` is immutable
// my_struct.regular_field = new_value;

// WORKS: although `my_struct` is immutable, `special_field` is a `Cell`,
// which can always be mutated
my_struct.special_field.set(new_value);
assert_eq!(my_struct.special_field.get(), new_value);

-- ds.h2: RefCell

A mutable memory location with dynamically checked borrow rules.

-- ds.code:
lang: rs

use std::cell::RefCell;

struct SomeStruct {
    regular_field: u8,
    special_field: RefCell<u8>,
}

let my_struct = SomeStruct {
    regular_field: 0,
    special_field: RefCell::new(1),
};

let new_value = 100;

// ERROR: `my_struct` is immutable
// my_struct.regular_field = new_value;

// WORKS: although `my_struct` is immutable, `special_field` is a `Cell`,
// which can always be mutated
*my_struct.special_field.borrow_mut() = new_value;

assert_eq!(*my_struct.special_field.borrow(), new_value);


-- ds.h2: Difference Between Cell and RefCell

In Rust document, Cell is "A mutable memory location", and RefCell is "A
mutable memory location with dynamically checked borrow rules".

They both provide "interior mutability", where you can modify the value stored 
in cell via immutable reference of the cell.

They both have an API get_mut to return a mutable reference to the underlying
data. This method requires a mutable reference to the cell, which guarantees
that the callee has exclusive ownership of the cell.

-- ds.code:
lang: rs

pub fn get_mut(&mut self) -> &mut T

-- ds.markdown:

The difference is how they implement interior mutability. Cell copies or moves
contained value, while RefCell allows both mutable and immutable reference
borrowing. Lets understand the difference via their APIs in this article.

-- ds.h3: Cell

The first set is the Copy API. It requires a Copy wrapper, and contains methods
 get and set. The method get returns a copy of the contained value, and set
 stores a copy of the argument val as the new value.

-- ds.code:
lang: rs

// impl<T: Copy> Cell<T>
pub fn get(&self) -> T

// impl<T> Cell<T>
pub fn set(&self, val: T)

-- ds.markdown:

Another set is the Move API. It has two methods take and set. The method take
moves out the contained value, leaving `Default::default()` in its place. The
call set also works for non-copyable type, where it moves the argument into the
cell.

-- ds.code:
lang: rs

// impl<T: Default> Cell<T>
pub fn take(&self) -> T

// impl<T> Cell<T>
pub fn set(&self, val: T)

-- ds.markdown:

The method replace is an alternative of take, when `T` does not implement
Default or the new value is known in advance when taking the value.

-- ds.code:
lang: rs

// impl<T> Cell<T>
pub fn replace(&self, val: T) -> T

-- ds.markdown:

An important property of Cell is that the cell cannot tell you whatâ€™s contained
in the cell via a reference. You either copy the contained value, or modify the
cell and move out the value.


-- ds.h3: RefCell

`RefCell` allows borrowing immutable or mutable reference to the contained
value. It tracks the borrows at runtime, via `borrow` and `borrow_mut`.

-- ds.code:
lang: rs

pub fn borrow(&self) -> Ref<T>
pub fn borrow_mut(&self) -> RefMut<T>

-- ds.markdown:

The method borrow grants temporary access to the contained value via immutable
reference. Multiple immutable borrows can be taken out at the same time. It
panics if the value is currently mutably borrowed.

The API `borrow_mut` mutably borrows the wrapped value. It panics if the value
is currently borrowed, either mutably or immutably.

The runtime tracking certainly has overheads, and `RefCell` also can lead to
runtime panics.
